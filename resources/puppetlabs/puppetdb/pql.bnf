<query> = expression;

(* TODO: order by *)
(* TODO: limit, offset *)
(* TODO: include_total *)
(* TODO: group_by *)
(* TODO: from *)
(* TODO: extract - projection *)
(* TODO: subqueries *)
(* TODO: aggregate functions *)

(* Expressions - the number after expr is the order of precedence *)
<expression> = expr4;
expr4      = expr3 { [<whitespace>], or, [<whitespace>], expr4 };
expr3      = expr2 { [<whitespace>], and, [<whitespace>], expr3 };
expr2      = {[ not ] expr2 } | expr1;
expr1      = { <lbracket>, expression, <rbracket> } | condexpression;

(* Conditional expression *)
(* TODO: '~>' and 'null?' and 'in' *)
condexpression   = field, [<whitespace>], (condexpregexp | condexpnumber | condexpmatch);
<condexpregexp> = condregexp, [<whitespace>], valueregexp;
<condexpnumber>  = condnumber, [<whitespace>], valuenumber;
<condexpmatch>   = condmatch, [<whitespace>], valuematch;

(* Conditional expression parts *)
<field>       = #'[a-zA-Z_]+';
<condregexp>  = '!~' | '=~';
<condnumber>  = '>=' | '<=' | '<' | '>';
<condmatch>   = '==' | '!=';
<valueregexp> = regexp;
<valuenumber> = integer | real;
<valuematch>  = string | integer | real | boolean;

(* Boolean operators *)
<and> = [<whitespace>], <'and'>, [<whitespace>];
<or>  = [<whitespace>], <'or'>, [<whitespace>];
not = [<whitespace>], <'!'>, [<whitespace>]; (* TODO: determine if we want 'not' here also *)

(* Regexp strings *)
regexp = <regexpquote>, stringwithoutregexpquote, <regexpquote>
<stringwithoutregexpquote> = #'(?:[^/\\]|\\.)*';
<regexpquote> = "/"

(* Value strings *)
string = (<singlequote>, stringwithoutsinglequotes, <singlequote>) | (<doublequote>, stringwithoutdoublequotes, <doublequote>);
<stringwithoutdoublequotes> = #'(?:[^"\\]|\\.)*';
<stringwithoutsinglequotes> = #'(?:[^\'\\]|\\.)*';
<singlequote> = "'";
<doublequote> = "\"";

(* Grouping *)
<lbracket> = [<whitespace>], '(', [<whitespace>];
<rbracket> = [<whitespace>], ')', [<whitespace>];

(* Booleans *)
boolean = true | false;
true = <"true">;
false = <"false">;

(* Numbers *)
integer    = [negative], digits;
real       = [negative], digits, ".", digits, [exp];
exp        = <"E" | "e">, [negative], digits;
<digits>   = #"[0-9]+";
<negative> = "-";

(* Whitespace *)
<whitespace> = #'\s+';

